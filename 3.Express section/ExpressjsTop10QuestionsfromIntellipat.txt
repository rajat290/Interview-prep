Ques1. How do we handle Routing in Express js?
in Express js routing is handled using the Router class which allows you  to define  routes for your application.

Ques2. Difference between req.params, req.query and req.body?
In Express all these Three are Used to access data sent in a HTTP request.

 [A].req.params: These are the parameters passed in the URL path. it majorly focused on the Heading Part ,
Matlab ki jab URL ke andar jo dynamic path variables hoti hain unka data yahan milta hai.

 For example, 
app.get('/user/:id', (req, res) => {
  console.log(req.params.id);  // Output: 123
  res.send(`User ID is ${req.params.id}`);
});

URL to hit:
http://localhost:3000/user/123

 [B]. req.query: These are the parameters passed in the URL query string.
 req.query	URL ke ? ke baad jo key=value format me hota hai, wo yahan milta hai.
 
app.get('/search', (req, res) => {
  console.log(req.query.keyword);  // Output: mobile
  res.send(`Searching for ${req.query.keyword}`);
});
URL to hit:
http://localhost:3000/search?keyword=mobile

    

[C]. req.body: These are the parameters passed in the request body.
req.body	Form ya JSON ke zariye bheja gaya data (mostly in POST/PUT requests).

For example,
app.use(express.json()); // important to read JSON body

app.post('/login', (req, res) => {
  console.log(req.body.email);  // Output: ravi@example.com
  res.send(`Welcome, ${req.body.email}`);
});
URL to hit:
http://localhost:3000/login

Client sends this data as JSON:

{
    "email": "ravi@example.com",
    "password": "123456"
    }

🧪 Comparison Table
| req.params | req.query | req.body |
| --- | --- | --- |
| URL Path Variables | URL Query String | Request Body (JSON/FORM) |
| e.g. /user/:id | e.g. /search?keyword=mobile |
| e.g. req.params.id | e.g. req.query.keyword | e.g. req.body

A REAL LIFE EXAMPLE WITH 🧠 SUPER SIMPLE (BACHHON WALI) EXPLANATION 

1. 🛣️ req.params ➝ Road ke upar likha hua naam
Socho tum ek building ke flat pe ja rahe ho:
/user/123 ➝ Flat number 123
To 123 tumhara req.params.id hai

2. ❓ req.query ➝ Sawal poochhne wale questions
Tum Google pe search karte ho:
/search?keyword=mobile&price=low
Yahan keyword aur price tumhare req.query ke part hain

3. 📦 req.body ➝ Andar se aayi hui parcel wali info

Ham jab form bharke server ko bhejte ho:

{
  "name": "Ravi",
  "email": "ravi@example.com"
}
Yeh data req.body me milta hai

🧠 INTERVIEW TIP
❓ “How do you get data from the client in Express?” ✅ Use this: “Express allows us to extract data using req.params for route variables, req.query for URL query strings, and req.body for form/JSON data in POST requests.”

🔥 REAL-WORLD USE CASES
Feature	Uses req.*
View user profile	GET /user/:id → req.params
Search filters	GET /products?type=phone&price=low → req.query
User login/signup form	POST /login → req.body

==========================================================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Ques2 What are middleware functions in Express and how do they works ?

Middleware functions in Express are functions that have access to the request (req) and response (res) objects, and the next middleware function in the application’s request-response cycle.

Middleware can:

1. Modify the req or res object

2. End the request-response cycle

3. Call next() to pass control to the next middleware


A REAL LIFE EXAMPLE WITH 🧠 SUPER SIMPLE (BACHHON WALI) EXPLANATION 

Socho Express.js ek school bus hai 🚌

Har student (request) ko school (response) tak jaana hai.

Middleware wahi bus ke stops hain — jahan tum kuch kaam kar sakte ho:

Attendance lena (log)

Bag check karna (authenticate)

Mask check karna (validate)

And phir agle stop pe le jao (next())

🔁 Jab tak next() nahi bologe, request agle stop (route or middleware) pe nahi jayegi.

🧪 3. BASIC MIDDLEWARE EXAMPLE:

const express = require('express');
const app = express();

// Custom middleware
const myLogger = (req, res, next) => {
  console.log(`Request method: ${req.method} | URL: ${req.url}`);
  next(); // Pass control to next middleware or route handler
};

// Apply middleware
app.use(myLogger);

app.get('/', (req, res) => {
  res.send('Home page');
});

app.listen(3000);


🧩 4. TYPES OF MIDDLEWARE:
There are three types of middleware in Express:
1. Application-level middleware (app.use())
Description
Added using app.use() or app.get()

2. Router-level middleware (router.use())
Description
Added using router.use() or router.get()

3. Built-in middleware (e.g., express.static(), express.json(), etc.)
Description
Added using express() or express.Router() constructor

 There are two more Types of Middleware
 1. Error-handling middleware
 Description
 Added using app.use() or app.get()

 2. Third-party middleware (	Like morgan, cors, helmet etc.)
 Description
 Added using npm install and then require() or import() in your code

🔐 5. PRACTICAL USE CASES OF MIDDLEWARE
Middleware is a powerful tool in Express that allows you to perform various tasks before or after handling a request
Here are some practical use cases of middleware:
1. Logging requests and responses
2. Authentication and authorization
3. Data validation and sanitization
4. Caching and rate limiting
5. Error handling and logging
6. Security headers and SSL/TLS configuration
7. Content compression and caching
8. Serving static files and assets
9. Body parsing	Convert JSON to JS object (req.body)
10. Cookie parsing	Convert cookie to JS object (req.cookies)
11. Session management
12. CSRF protection

🔗 6. CHAINING MULTIPLE MIDDLEWARE

const checkAuth = (req, res, next) => {
  if (!req.headers.authorization) {
    return res.status(401).send("Unauthorized");
  }
  next(); // user is authorized
};

const logUser = (req, res, next) => {
  console.log("User is logged in");
  next();
};

app.get('/dashboard', checkAuth, logUser, (req, res) => {
  res.send("Welcome to dashboard");
});


just bonus tips What is the difference between req and res in Express js
req is the request object which contains information about the incoming request, while res is the response object which
is used to send the response back to the client.

==========================================================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


3. What is body Parser in Express js? how do you use them ?
🔧 1. TECHNICAL DEFINITION
Body Parser is a middleware in Express.js that parses the incoming request body (usually in JSON, form, or URL-encoded format) and makes it available in req.body.