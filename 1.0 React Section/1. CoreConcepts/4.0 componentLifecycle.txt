 React Component Lifecycle ek aisa topic hai jo verbal interviews mein bar-bar repeat hota hai, especially jab React ke deep understanding test karni hoti hai.

 🧠 What is Component Lifecycle in React?
The React Component Lifecycle defines the sequence of methods that are invoked in different phases of a component's existence – from its creation (mounting), update (re-rendering), and removal (unmounting).

Ye lifecycle samajhna important hota hai so we know when and where to place our code like fetching data, cleaning up timers, DOM interactions etc.

🧩 React Lifecycle has 3 Main Phases:
Mounting Phase – when the component is being created & inserted into the DOM

Updating Phase – when the component is re-rendered due to state/props change

Unmounting Phase – when the component is removed from the DOM

⚙️ 1. Mounting Phase
When the component is first rendered to the DOM.

Lifecycle Hooks (Class Component):
constructor()

static getDerivedStateFromProps()

render()

componentDidMount()

✅ Most common one = componentDidMount()

componentDidMount() {
  fetchData();
}

🔁 2. Updating Phase
Happens when props or state change.

Hooks:
static getDerivedStateFromProps()

shouldComponentUpdate()

render()

getSnapshotBeforeUpdate()

componentDidUpdate()

✅ Most used = componentDidUpdate()
Use case: Responding to prop/state changes, triggering animations, API refetching.

componentDidUpdate(prevProps, prevState) {
  if (prevProps.id !== this.props.id) {
    fetchNewData();
  }
}


🗑️ 3. Unmounting Phase
When the component is removed from the DOM.

Hook:
componentWillUnmount()

✅ Use case: Cleanup – clear timers, cancel API calls, remove event listeners.

componentWillUnmount() {
  clearInterval(this.timer);
}

🔄 Functional Components Version (with Hooks)


In functional components, we use the useEffect() hook to simulate all the above lifecycle methods.

useEffect(() => {
  // like componentDidMount
  fetchData();

  return () => {
    // like componentWillUnmount
    cleanup();
  };
}, []);

useEffect(() => {
  // like componentDidUpdate
}, [props.value]);


🧠 Interview Verbal Summary (Answer Like This):
React components go through a lifecycle that includes mounting, updating, and unmounting.
In class components, we use lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount to handle logic at different stages.
In modern React, these lifecycles are handled using useEffect Hook.
For example, I use useEffect(() => {...}, []) for initial data fetch, and I return a cleanup function for teardown tasks like unsubscribing from listeners or clearing intervals.


🎯 Real-World Use Cases
Lifecycle Phase	What You Can Do There
Mount (useEffect([]))	API calls, subscriptions, DOM manipulations
Update (useEffect([dependency]))	React to state/prop changes, animation
Unmount (return () => {})	Clear intervals, unsubscribe, cleanup